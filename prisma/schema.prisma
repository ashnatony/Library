generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  password      String
  role          Role            @default(USER)
  regNumber     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  adminAccess   AdminPermission?
  borrowings    Borrowing[]
  reservations  Reservation[]
  fines         Fine[]
  notifications Notification[]
  reviews       Review[]
}

model AdminPermission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  isActive  Boolean  @default(true)
  grantedBy String
  grantedAt DateTime @default(now())
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Book {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  author        String
  isbn          String         @unique
  publisher     String?
  publishYear   Int?
  category      String?
  description   String?
  coverImage    String?
  totalCopies   Int           @default(1)
  availableCopies Int         @default(1)
  location      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  borrowings    Borrowing[]
  reservations  Reservation[]
  reviews       Review[]
}

model Borrowing {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  bookId        String    @db.ObjectId
  borrowDate    DateTime  @default(now())
  dueDate       DateTime
  returnDate    DateTime?
  status        BorrowStatus @default(BORROWED)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  book          Book      @relation(fields: [bookId], references: [id])
}

model Reservation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  bookId        String    @db.ObjectId
  reserveDate   DateTime  @default(now())
  expiryDate    DateTime
  status        ReserveStatus @default(RESERVED)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  book          Book      @relation(fields: [bookId], references: [id])
}

model Fine {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  amount        Float
  reason        String
  status        FineStatus @default(UNPAID)
  dueDate       DateTime
  paidDate      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
}

model Review {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  bookId        String    @db.ObjectId
  rating        Int
  comment       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  book          Book      @relation(fields: [bookId], references: [id])
}

model Notification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  title         String
  message       String
  type          NotificationType
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
}

enum BorrowStatus {
  BORROWED
  RETURNED
  OVERDUE
  LOST
}

enum ReserveStatus {
  RESERVED
  FULFILLED
  CANCELLED
  EXPIRED
}

enum FineStatus {
  UNPAID
  PAID
  WAIVED
}

enum NotificationType {
  BORROW
  RETURN
  RESERVE
  FINE
  SYSTEM
} 